"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[388],{212:(e,n,t)=>{t.r(n),t.d(n,{data:()=>a});const a={key:"v-822c14b6",path:"/BTRFS.html",title:"My ideal BTRFS setup on Arch Linux",lang:"en-US",frontmatter:{sidebarDepth:3},excerpt:"",headers:[{level:2,title:"The problem",slug:"the-problem",children:[]},{level:2,title:"The solution",slug:"the-solution",children:[]},{level:2,title:"Step-by-Step Guide",slug:"step-by-step-guide",children:[{level:3,title:"EFI System Partition (ESP) setup",slug:"efi-system-partition-esp-setup",children:[{level:4,title:"Backup /efi (OPTIONAL)",slug:"backup-efi-optional",children:[]}]},{level:3,title:"LUKS2 setup",slug:"luks2-setup",children:[{level:4,title:"Avoid entering passphrase twice (OPTIONAL)",slug:"avoid-entering-passphrase-twice-optional",children:[]}]},{level:3,title:"GRUB setup",slug:"grub-setup",children:[{level:4,title:"grub-btrfs setup",slug:"grub-btrfs-setup",children:[]}]}]},{level:2,title:"Conclusion",slug:"conclusion",children:[]}],filePathRelative:"BTRFS.md",git:{updatedTime:1637177041e3,contributors:[{name:"D. Debnath",email:"d_debnath@outlook.com",commits:2}]}}},460:(e,n,t)=>{t.r(n),t.d(n,{default:()=>an});var a=t(252);const s=(0,a._)("h1",{id:"my-ideal-btrfs-setup-on-arch-linux",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#my-ideal-btrfs-setup-on-arch-linux","aria-hidden":"true"},"#"),(0,a.Uk)(" My ideal BTRFS setup on Arch Linux")],-1),o=(0,a.Uk)("In this post, I'll describe how I managed to fix some problems with my encrypted BTRFS (with snapper) setup in Arch Linux after some hit and trial. Although the venerable "),i={href:"https://wiki.archlinux.org",target:"_blank",rel:"noopener noreferrer"},c=(0,a.Uk)("Arch Wiki"),l=(0,a.Uk)(" has most of the information presented here, it had some missing pieces and the information in the wiki is scattered over many entries. I've tried to compile everything into one cohesive piece here."),r=(0,a._)("p",null,"This post assumes you are already familiar with, and are (or will be) using:",-1),p=(0,a._)("ul",null,[(0,a._)("li",null,"btrfs"),(0,a._)("li",null,"cryptsetup (LUKS2)"),(0,a._)("li",null,"UEFI"),(0,a._)("li",null,"snapper"),(0,a._)("li",null,"grub"),(0,a._)("li",null,"Arch btw ðŸ˜‰")],-1),d={class:"custom-container tip"},u=(0,a._)("p",{class:"custom-container-title"},"NOTE",-1),h=(0,a.Uk)("GRUB, because only GRUB has support for this workflow. Check comparison table "),k={href:"https://wiki.archlinux.org/title/Arch_boot_process#Feature_comparison",target:"_blank",rel:"noopener noreferrer"},f=(0,a.Uk)("here"),b=(0,a.Uk)("."),g=(0,a.uE)('<h2 id="the-problem" tabindex="-1"><a class="header-anchor" href="#the-problem" aria-hidden="true">#</a> The problem</h2><p>Until now, I was mounting the ESP (<em>EFI System Partition</em>) to <code>/boot</code>, which is quite common in Arch Linux. But this has some drawbacks:</p><ol><li><p>Each snapshot of the root subvolume wouldn&#39;t have its own copy of the kernel and initrd images (which are located inside <code>/boot</code>). This means that there is no guarantee that you will be able to boot a snapshot from a month ago, if your current kernel/initrd is not the same as the kernel/initrd that was being used when the snapshot was taken, especially if you&#39;ve made significant changes to <code>/etc/mkinitcpio.conf</code>.</p></li><li><p>If your system becomes unbootable after an upgrade due to a problem with the kernel, then you won&#39;t be able to boot an otherwise perfectly working old snapshot of your system.</p></li><li><p>If you want to maintain a twin system (while having the ability to modify the twin without worrying about messing up your main system), then the two systems should not share anything, including the kernels and initrd images.</p></li></ol><h2 id="the-solution" tabindex="-1"><a class="header-anchor" href="#the-solution" aria-hidden="true">#</a> The solution</h2><p>We simply need to keep <code>/boot</code> as a simple directory in the subvolume mounted at <code>/</code> i.e. don&#39;t mount anything to <code>/boot</code>. This will ensure that each snapshot has its own copy of the contents of <code>/boot</code> and wouldn&#39;t be sharing the same exact <code>/boot</code>, which they otherwise do when the ESP is mounted at <code>/boot</code>.</p><p>But for this to work, the EFI bootloader in the ESP needs to be able to read the kernel and initrd images from the BTRFS partition. Additionally, if the BTRFS partition is encrypted, then it will have to unlock the encrypted partition first and then read the BTRFS partition inside it.</p>',6),m=(0,a.Uk)("Currently, only one bootloader has this capability: GRUB. ("),y={href:"https://wiki.archlinux.org/title/Arch_boot_process#Feature_comparison",target:"_blank",rel:"noopener noreferrer"},v=(0,a.Uk)("See here"),_=(0,a.Uk)(")"),w=(0,a.uE)('<h2 id="step-by-step-guide" tabindex="-1"><a class="header-anchor" href="#step-by-step-guide" aria-hidden="true">#</a> Step-by-Step Guide</h2><h3 id="efi-system-partition-esp-setup" tabindex="-1"><a class="header-anchor" href="#efi-system-partition-esp-setup" aria-hidden="true">#</a> EFI System Partition (ESP) setup</h3><p>We need to mount the ESP to <code>/efi</code> instead of <code>/boot</code>.</p><ol><li><p>Edit <code>/etc/fstab</code> and change the mount point of the ESP for <code>/boot</code> to <code>/efi</code>.</p></li><li><p>Unmount the ESP currently mounted at <code>/boot</code> and mount it to <code>/efi</code>, like this:</p></li></ol><div class="language-bash ext-sh"><pre class="language-bash"><code>$ <span class="token function">sudo</span> <span class="token function">umount</span> /boot\n$ <span class="token function">sudo</span> <span class="token function">mkdir</span> /efi\n$ <span class="token function">sudo</span> <span class="token function">mount</span> /efi\n</code></pre></div>',5),U=(0,a.Uk)("At this point, your "),x=(0,a._)("code",null,"/boot",-1),S=(0,a.Uk)(" directory should be empty. To populate it with the kernel and initrd images, reinstall the "),E=(0,a._)("code",null,"linux",-1),B=(0,a.Uk)(" package (or whatever kernel you use) and the "),I={href:"https://wiki.archlinux.org/title/Microcode",target:"_blank",rel:"noopener noreferrer"},T=(0,a.Uk)("microcode"),R=(0,a.Uk)(" package, like this:"),A=(0,a.uE)('<div class="language-bash ext-sh"><pre class="language-bash"><code>$ <span class="token function">sudo</span> pacman -S linux intel-ucode <span class="token comment">#use amd-ucode for AMD CPU</span>\n</code></pre></div><p><code>/boot</code> should look something like this now:</p><div class="language-bash ext-sh"><pre class="language-bash"><code>$ <span class="token function">ls</span> /boot\ninitramfs-linux-fallback.img  initramfs-linux.img  intel-ucode.img  vmlinuz-linux\n</code></pre></div><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>You should clean up the old version of these files now present in <code>/efi</code> only after going through this entire post and verifying that everything works.</p></div>',4),P=(0,a.Uk)("If you were using the "),F=(0,a._)("code",null,"50-bootbackup.hook",-1),N=(0,a.Uk)(" pacman hook "),L={href:"https://wiki.archlinux.org/title/Snapper#Backup_non-Btrfs_boot_partition_on_pacman_transactions",target:"_blank",rel:"noopener noreferrer"},O=(0,a.Uk)("described in the Arch Wiki"),W=(0,a.Uk)(", you no longer need it, and you should remove it:"),D=(0,a.uE)('<div class="language-bash ext-sh"><pre class="language-bash"><code>$ <span class="token function">sudo</span> <span class="token function">rm</span> /etc/pacman.d/hooks/50-bootbackup.hook\n</code></pre></div><p>Instead, you might want to back up the ESP mounted to <code>/efi</code>. The procedure for doing so is described next.</p><h4 id="backup-efi-optional" tabindex="-1"><a class="header-anchor" href="#backup-efi-optional" aria-hidden="true">#</a> Backup <code>/efi</code> (OPTIONAL)</h4><p>Because the ESP is outside BTRFS, its content will not be part of snapshots. To keep a synced copy inside BTRFS root subvolume (in <code>/.esp.backup</code>), use the following systemd units (you need both the files):</p><hr><p><code>/etc/systemd/system/espbackup.path</code></p><div class="language-ini ext-ini"><pre class="language-ini"><code><span class="token header"><span class="token punctuation">[</span><span class="token section-name selector">Unit</span><span class="token punctuation">]</span></span>\n<span class="token key attr-name">Description</span><span class="token punctuation">=</span><span class="token value attr-value">Monitors for changes in ESP</span>\n<span class="token key attr-name">DefaultDependencies</span><span class="token punctuation">=</span><span class="token value attr-value">no</span>\n<span class="token key attr-name">After</span><span class="token punctuation">=</span><span class="token value attr-value">efi.mount</span>\n<span class="token key attr-name">BindsTo</span><span class="token punctuation">=</span><span class="token value attr-value">efi.mount</span>\n\n<span class="token header"><span class="token punctuation">[</span><span class="token section-name selector">Path</span><span class="token punctuation">]</span></span>\n<span class="token key attr-name">PathModified</span><span class="token punctuation">=</span><span class="token value attr-value">/efi</span>\n\n<span class="token header"><span class="token punctuation">[</span><span class="token section-name selector">Install</span><span class="token punctuation">]</span></span>\n<span class="token key attr-name">WantedBy</span><span class="token punctuation">=</span><span class="token value attr-value">efi.mount</span>\n</code></pre></div><div class="custom-container tip"><p class="custom-container-title">NOTE</p><p>Replace <code>efi.mount</code> with the name of the systemd service that mounts <code>/efi</code>. Run <code>systemctl list-units -t mount</code> to find out.</p></div><hr><p><code>/etc/systemd/system/espbackup.service</code></p><div class="language-ini ext-ini"><pre class="language-ini"><code><span class="token header"><span class="token punctuation">[</span><span class="token section-name selector">Unit</span><span class="token punctuation">]</span></span>\n<span class="token key attr-name">Description</span><span class="token punctuation">=</span><span class="token value attr-value">Sync ESP</span>\n\n<span class="token header"><span class="token punctuation">[</span><span class="token section-name selector">Service</span><span class="token punctuation">]</span></span>\n<span class="token key attr-name">Type</span><span class="token punctuation">=</span><span class="token value attr-value">oneshot</span>\n<span class="token comment"># Set the possible paths for `rsync`</span>\n<span class="token key attr-name">Environment</span><span class="token punctuation">=</span><span class="token value attr-value">&quot;<span class="token inner-value">PATH=/sbin:/bin:/usr/sbin:/usr/bin</span>&quot;</span>\n<span class="token comment"># Sync directories</span>\n<span class="token key attr-name">ExecStart</span><span class="token punctuation">=</span><span class="token value attr-value">rsync -a --delete /efi/ /.efi.backup</span>\n</code></pre></div><hr><p>Now, enable and start it with:</p><div class="language-bash ext-sh"><pre class="language-bash"><code>$ <span class="token function">sudo</span> systemctl <span class="token builtin class-name">enable</span> --now espbackup.path\n</code></pre></div><h3 id="luks2-setup" tabindex="-1"><a class="header-anchor" href="#luks2-setup" aria-hidden="true">#</a> LUKS2 setup</h3>',15),G={class:"custom-container danger"},$=(0,a._)("p",{class:"custom-container-title"},"WARNING",-1),K=(0,a.Uk)("If the header of a LUKS encrypted partition gets destroyed, you will not be able to decrypt your data. Before proceeding with this section, make sure that you back up the header of your current LUKS partition and store it in a safe location (which must be "),q=(0,a._)("em",null,"outside",-1),C=(0,a.Uk)(" that encrypted partition itself, obviously). "),X={href:"https://wiki.archlinux.org/title/Dm-crypt/Device_encryption#Backup_using_cryptsetup",target:"_blank",rel:"noopener noreferrer"},M=(0,a.Uk)("Consult the Arch Wiki for this"),Y=(0,a.Uk)("."),H=(0,a._)("p",null,[(0,a.Uk)("If "),(0,a._)("code",null,"/dev/sdXN"),(0,a.Uk)(" is your LUKS2 partition, check current keyslots with:")],-1),z=(0,a._)("div",{class:"language-bash ext-sh"},[(0,a._)("pre",{class:"language-bash"},[(0,a._)("code",null,[(0,a.Uk)("$ "),(0,a._)("span",{class:"token function"},"sudo"),(0,a.Uk)(" cryptsetup luksDump /dev/sdXN\n")])])],-1),Z=(0,a.Uk)("Note which keyslot is being used. If the PBKDF of your current key is not "),J=(0,a._)("code",null,"pbkdf2",-1),Q=(0,a.Uk)(", then you have to convert it to "),j=(0,a._)("code",null,"pbkdf2",-1),V=(0,a.Uk)(" because in the current version of GRUB, "),ee={href:"https://git.savannah.gnu.org/cgit/grub.git/commit/?id=365e0cc3e7e44151c14dd29514c2f870b49f9755",target:"_blank",rel:"noopener noreferrer"},ne=(0,a.Uk)("only the "),te=(0,a._)("code",null,"pbkdf2",-1),ae=(0,a.Uk)(" key derival function is supported"),se=(0,a.Uk)("."),oe=(0,a._)("p",null,[(0,a.Uk)("The PBKDF algorithm can be changed for the existing key with (replace "),(0,a._)("em",null,"N"),(0,a.Uk)(" with the actual keyslot number, and "),(0,a._)("code",null,"/dev/sdXN"),(0,a.Uk)(" with your LUKS2 partition):")],-1),ie=(0,a._)("div",{class:"language-bash ext-sh"},[(0,a._)("pre",{class:"language-bash"},[(0,a._)("code",null,[(0,a.Uk)("$ "),(0,a._)("span",{class:"token function"},"sudo"),(0,a.Uk)(" cryptsetup luksConvertKey --key-slot N --pbkdf pbkdf2 /dev/sdXN\n")])])],-1),ce={class:"custom-container tip"},le=(0,a._)("p",{class:"custom-container-title"},"NOTE",-1),re=(0,a._)("p",null,[(0,a.Uk)("The decryption of GRUB is quite slow. You can make it faster by changing the "),(0,a._)("code",null,"iter-time"),(0,a.Uk)(" parameter of the key. Just add "),(0,a._)("code",null,"--iter-time XXXX"),(0,a.Uk)(" to the command above.")],-1),pe=(0,a.Uk)("See "),de={href:"https://unix.stackexchange.com/questions/369414/grub-takes-too-long-to-unlock-the-encrypted-boot-partition",target:"_blank",rel:"noopener noreferrer"},ue=(0,a.Uk)("here"),he=(0,a.Uk)(" for more info. I used a value of "),ke=(0,a._)("code",null,"500",-1),fe=(0,a.Uk)(" (default is "),be=(0,a._)("code",null,"2000",-1),ge=(0,a.Uk)("), but do your own research on this, because reducing the "),me=(0,a._)("code",null,"iter-time",-1),ye=(0,a.Uk)(" will reduce security."),ve=(0,a.uE)('<div class="custom-container tip"><p class="custom-container-title">NOTE</p><p>After verifying that everything works, you might want to create another backup of your new LUKS header</p></div><h4 id="avoid-entering-passphrase-twice-optional" tabindex="-1"><a class="header-anchor" href="#avoid-entering-passphrase-twice-optional" aria-hidden="true">#</a> Avoid entering passphrase twice (OPTIONAL)</h4><p>You will be prompted twice for a passphrase: first, for GRUB to unlock and access <code>/boot</code> in early boot, and second, to unlock the root filesystem itself as implemented by the initramfs. You can use a keyfile to avoid this.</p><p>Do the following to generate a keyfile, give it suitable permissions and add it as a LUKS key:</p><div class="language-bash ext-sh"><pre class="language-bash"><code>$ <span class="token function">sudo</span> <span class="token function">dd</span> <span class="token assign-left variable">bs</span><span class="token operator">=</span><span class="token number">512</span> <span class="token assign-left variable">count</span><span class="token operator">=</span><span class="token number">4</span> <span class="token assign-left variable">if</span><span class="token operator">=</span>/dev/random <span class="token assign-left variable">of</span><span class="token operator">=</span>/crypto_keyfile.bin <span class="token assign-left variable">iflag</span><span class="token operator">=</span>fullblock\n$ <span class="token function">sudo</span> <span class="token function">chmod</span> <span class="token number">600</span> /crypto_keyfile.bin\n$ <span class="token function">sudo</span> <span class="token function">chmod</span> <span class="token number">600</span> /boot/initramfs-linux*\n$ <span class="token function">sudo</span> cryptsetup luksAddKey /dev/sdXN /crypto_keyfile.bin\n</code></pre></div><p>where <code>/dev/sdXN</code> is your LUKS2 partition.</p><div class="custom-container warning"><p class="custom-container-title">WARNING</p><p>If you&#39;re using the <code>encrypt</code> hook in <code>/etc/mkinitcpio.conf</code>, the keyfile must be named and located <em>exactly</em> in <code>/crypto_keyfile.bin</code>, otherwise you will need extra configuration.</p><p>If you&#39;re using <code>sd-encrypt</code> instead, consult the Arch Wiki about configuring the keyfile, because I&#39;ve never tried <code>sd-encrypt</code>.</p></div>',7),_e=(0,a.Uk)("("),we={href:"https://wiki.archlinux.org/title/Dm-crypt/Device_encryption#With_a_keyfile_embedded_in_the_initramfs",target:"_blank",rel:"noopener noreferrer"},Ue=(0,a.Uk)("Source: Arch Wiki"),xe=(0,a.Uk)(")"),Se=(0,a.uE)('<p>Include the key in <code>/etc/mkinitcpio.conf</code>&#39;s <code>FILES</code> array:</p><div class="language-text ext-text"><pre class="language-text"><code>FILES=(/crypto_keyfile.bin)\n</code></pre></div><p>Regenerate the initramfs:</p><div class="language-bash ext-sh"><pre class="language-bash"><code>$ <span class="token function">sudo</span> mkinitcpio -P\n</code></pre></div><div class="custom-container tip"><p class="custom-container-title">NOTE</p><p>The keyfile doesn&#39;t need to be <code>pbkdf2</code></p></div><h3 id="grub-setup" tabindex="-1"><a class="header-anchor" href="#grub-setup" aria-hidden="true">#</a> GRUB setup</h3>',6),Ee=(0,a.Uk)("Install the "),Be={href:"https://archlinux.org/packages/core/x86_64/grub/",target:"_blank",rel:"noopener noreferrer"},Ie=(0,a._)("code",null,"grub",-1),Te=(0,a.Uk)(" package if not already installed:"),Re=(0,a.uE)('<div class="language-bash ext-sh"><pre class="language-bash"><code>$ <span class="token function">sudo</span> pacman -S grub\n</code></pre></div><p>Edit <code>/etc/default/grub</code> and add <code>luks2</code> to <code>GRUB_PRELOAD_MODULES</code>, like this:</p><div class="language-text ext-text"><pre class="language-text"><code>GRUB_PRELOAD_MODULES=&quot;part_gpt part_msdos luks2&quot;\n</code></pre></div><p>Edit the other configurations in <code>/etc/default/grub</code> as you normally do.</p><p>Create the file <code>/etc/grub.d/01_header</code> with the following content:</p><div class="language-bash ext-sh"><pre class="language-bash"><code><span class="token shebang important">#! /bin/sh</span>\n\n<span class="token comment"># replace d36b433dfce44d91b7cef4f37c2a3bdd with UUID of your LUKS2 partition</span>\n<span class="token builtin class-name">echo</span> <span class="token string">&quot;cryptomount -u d36b433dfce44d91b7cef4f37c2a3bdd&quot;</span>\n</code></pre></div>',6),Ae={class:"custom-container tip"},Pe=(0,a._)("p",{class:"custom-container-title"},"NOTE",-1),Fe=(0,a.Uk)("If the UUID of your LUKS2 partition is "),Ne=(0,a._)("code",null,"d36b433d-fce4-4d91-b7ce-f4f37c2a3bdd",-1),Le=(0,a.Uk)(", you should remove the dashes, like this: "),Oe=(0,a._)("code",null,"d36b433dfce44d91b7cef4f37c2a3bdd",-1),We=(0,a.Uk)(". ("),De={href:"https://www.gnu.org/software/grub/manual/grub/html_node/cryptomount.html#cryptomount",target:"_blank",rel:"noopener noreferrer"},Ge=(0,a.Uk)("Source"),$e=(0,a.Uk)(")."),Ke=(0,a.Uk)("(This is much simpler than the process described "),qe={href:"https://wiki.archlinux.org/title/GRUB#LUKS2",target:"_blank",rel:"noopener noreferrer"},Ce=(0,a.Uk)("here"),Xe=(0,a.Uk)(" in the Arch Wiki.)"),Me=(0,a.uE)('<p>Now register GRUB in the ESP:</p><div class="language-bash ext-sh"><pre class="language-bash"><code>$ <span class="token function">sudo</span> grub-install --target<span class="token operator">=</span>x86_64-efi --efi-directory<span class="token operator">=</span>/efi --boot-directory<span class="token operator">=</span>/efi --bootloader-id<span class="token operator">=</span>GRUB\n</code></pre></div><p>The command above should create:</p><ul><li>the file <code>/efi/EFI/GRUB/grubx64.efi</code></li><li>the directory <code>/efi/grub</code></li><li>an entry in the UEFI bootloader called <code>GRUB</code>, which you can verify by running <code>efibootmgr</code></li></ul><p>Finally, generate the GRUB configuration:</p><div class="language-bash ext-sh"><pre class="language-bash"><code>$ <span class="token function">grub-mkconfig</span> -o /efi/grub/grub.cfg\n</code></pre></div><h4 id="grub-btrfs-setup" tabindex="-1"><a class="header-anchor" href="#grub-btrfs-setup" aria-hidden="true">#</a> <code>grub-btrfs</code> setup</h4>',7),Ye=(0,a.Uk)("Install "),He={href:"https://archlinux.org/packages/community/any/grub-btrfs/",target:"_blank",rel:"noopener noreferrer"},ze=(0,a._)("code",null,"grub-btrfs",-1),Ze=(0,a.Uk)(":"),Je=(0,a.uE)('<div class="language-bash ext-sh"><pre class="language-bash"><code>$ <span class="token function">sudo</span> pacman -S grub-btrfs\n</code></pre></div><p>The configuration file for <code>grub-btrfs</code> is <code>/etc/default/grub-btrfs/config</code>. Change the following value in <code>/etc/default/grub-btrfs/config</code>:</p><div class="language-text ext-text"><pre class="language-text"><code>GRUB_BTRFS_GRUB_DIRNAME=&quot;/efi/grub&quot;\n</code></pre></div><p>For entries to be automatically added to the GRUB menu whenever a snapshot is made or deleted, mount your subvolume which contains snapshots to <code>/.snapshots</code> (ideally you should have an entry for this in <code>/etc/fstab</code>), and run:</p><div class="language-bash ext-sh"><pre class="language-bash"><code>$ <span class="token function">sudo</span> systemctl <span class="token builtin class-name">enable</span> --now grub-btrfs.path\n</code></pre></div><p><code>grub-btrfs.path</code> is a systemd unit which automatically (re)generates <code>/efi/grub/grub-btrfs.cfg</code> whenever a modification happens in <code>/.snapshots</code>.</p><h5 id="booting-read-only-snapshots" tabindex="-1"><a class="header-anchor" href="#booting-read-only-snapshots" aria-hidden="true">#</a> Booting read-only snapshots</h5><blockquote><p>Booting on a snapshot in read-only mode can be tricky. An elegant way is to boot this snapshot using overlayfs (included in the kernel â‰¥ 3.18).</p></blockquote><blockquote><p>Using overlayfs, the booted snapshot will behave like a live-cd in non-persistent mode. The snapshot will not be modified, the system will be able to boot correctly, because a writeable folder will be included in the ram.</p></blockquote>',9),Qe=(0,a.Uk)("("),je={href:"https://github.com/Antynea/grub-btrfs/blob/master/initramfs/readme.md",target:"_blank",rel:"noopener noreferrer"},Ve=(0,a.Uk)("Source"),en=(0,a.Uk)(")"),nn=(0,a.uE)('<p>Edit <code>/etc/mkinitcpio.conf</code> and add the hook <code>grub-btrfs-overlayfs</code> at the end of the line <code>HOOKS</code>. For example:</p><div class="language-text ext-text"><pre class="language-text"><code>HOOKS=(base udev autodetect modconf block filesystems keyboard fsck grub-btrfs-overlayfs)\n</code></pre></div><div class="custom-container danger"><p class="custom-container-title">WARNING</p><p>Do not copy-paste the above line. You should only add <code>grub-btrfs-overlayfs</code> to the pre-existing line in the file.</p></div><p>Finally regenerate the initramfs.</p><div class="language-bash ext-sh"><pre class="language-bash"><code>$ <span class="token function">sudo</span> mkinitcpio -P\n</code></pre></div><h2 id="conclusion" tabindex="-1"><a class="header-anchor" href="#conclusion" aria-hidden="true">#</a> Conclusion</h2><p>If everything works as intended after rebooting, you should delete the following files:</p><div class="language-text ext-text"><pre class="language-text"><code>/efi/initramfs-linux-fallback.img\n/efi/initramfs-linux.img\n/efi/intel-ucode.img\n/efi/vmlinuz-linux\n</code></pre></div><p>Now the ESP (mounted to <code>/efi</code>) should look something like this:</p><div class="language-text ext-text"><pre class="language-text"><code>/efi\nâ”œâ”€â”€ EFI\nâ”‚   â”œâ”€â”€ BOOT\nâ”‚   â”‚   â””â”€â”€ BOOTX64.EFI\nâ”‚   â””â”€â”€ GRUB\nâ”‚       â””â”€â”€ grubx64.efi\nâ””â”€â”€ grub\n    â”œâ”€â”€ fonts\n    â”œâ”€â”€ grub-btrfs.cfg\n    â”œâ”€â”€ grub.cfg\n    â”œâ”€â”€ grubenv\n    â”œâ”€â”€ locale\n    â”œâ”€â”€ themes\n    â””â”€â”€ x86_64-efi\n</code></pre></div><p>Quite clean âœ¨, eh?</p><p>You can verify that each snapshot is using its own copy of the kernel and initrd images by inspecting the entries generated in <code>/efi/grub/grub-btrfs.cfg</code>. Notice the lines starting with <code>linux</code> and <code>initrd</code> for the various entries, and you will observe that each entry is using its own <code>/boot</code> directory for booting.</p><p>In the future, I&#39;ll describe how I can now effortlessly create and manage a twin system with this setup. Thanks for reading!</p>',13),tn={},an=(0,t(744).Z)(tn,[["render",function(e,n){const t=(0,a.up)("OutboundLink");return(0,a.wg)(),(0,a.iD)(a.HY,null,[s,(0,a._)("p",null,[o,(0,a._)("a",i,[c,(0,a.Wm)(t)]),l]),r,p,(0,a._)("div",d,[u,(0,a._)("p",null,[h,(0,a._)("a",k,[f,(0,a.Wm)(t)]),b])]),g,(0,a._)("p",null,[m,(0,a._)("a",y,[v,(0,a.Wm)(t)]),_]),w,(0,a._)("p",null,[U,x,S,E,B,(0,a._)("a",I,[T,(0,a.Wm)(t)]),R]),A,(0,a._)("p",null,[P,F,N,(0,a._)("a",L,[O,(0,a.Wm)(t)]),W]),D,(0,a._)("div",G,[$,(0,a._)("p",null,[K,q,C,(0,a._)("a",X,[M,(0,a.Wm)(t)]),Y])]),H,z,(0,a._)("p",null,[Z,J,Q,j,V,(0,a._)("a",ee,[ne,te,ae,(0,a.Wm)(t)]),se]),oe,ie,(0,a._)("div",ce,[le,re,(0,a._)("p",null,[pe,(0,a._)("a",de,[ue,(0,a.Wm)(t)]),he,ke,fe,be,ge,me,ye])]),ve,(0,a._)("p",null,[_e,(0,a._)("a",we,[Ue,(0,a.Wm)(t)]),xe]),Se,(0,a._)("p",null,[Ee,(0,a._)("a",Be,[Ie,(0,a.Wm)(t)]),Te]),Re,(0,a._)("div",Ae,[Pe,(0,a._)("p",null,[Fe,Ne,Le,Oe,We,(0,a._)("a",De,[Ge,(0,a.Wm)(t)]),$e])]),(0,a._)("p",null,[Ke,(0,a._)("a",qe,[Ce,(0,a.Wm)(t)]),Xe]),Me,(0,a._)("p",null,[Ye,(0,a._)("a",He,[ze,(0,a.Wm)(t)]),Ze]),Je,(0,a._)("p",null,[Qe,(0,a._)("a",je,[Ve,(0,a.Wm)(t)]),en]),nn],64)}]])},744:(e,n)=>{n.Z=(e,n)=>{const t=e.__vccOpts||e;for(const[e,a]of n)t[e]=a;return t}}}]);